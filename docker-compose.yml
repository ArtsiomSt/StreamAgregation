version: "3.9"

services:
  fastapi:
    image: artsiomst/fastapi-main
    build: src
    command: bash -c "python -m uvicorn application.app:app --reload --host 0.0.0.0 --port 8000"
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app
    depends_on:
      - kafka
      - test_pgdb
    env_file:
      - env/backends.env
      - env/twitch.env
      - env/broker.env
      - env/db.env
    networks:
      - botnet
  fastapi_parser:
    image: artsiomst/fastapi-parser
    build: src
    command: bash -c "python -m uvicorn application.app:app --reload --host 0.0.0.0 --port 8001"
    ports:
      - "8001:8001"
    volumes:
      - ./src:/app
    depends_on:
      - kafka
    env_file:
      - env/backends.env
      - env/twitch.env
      - env/broker.env
      - env/db.env
    networks:
      - botnet
  schedule:
    image: artsiomst/fastapi-schedule
    build: scheduler
    command: bash -c "python schedule_tasks.py"
    volumes:
      - ./scheduler:/app
    depends_on:
      - kafka
      - fastapi_parser
      - fastapi
    env_file:
      - env/backends.env
      - env/twitch.env
      - env/broker.env
      - env/db.env
    networks:
      - botnet
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - botnet
    healthcheck:
      test: [ "CMD", "nc", "-zv", "localhost", "2181" ]
      interval: 20s
      timeout: 10s
      retries: 3
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
          condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - botnet
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "9092"]
      interval: 20s
      timeout: 10s
      retries: 3
  broker:
    build: broker
    image: artsiomst/kafka-broker
    command: bash -c "python broker.py"
    env_file:
      - env/backends.env
      - env/broker.env
    volumes:
      - ./broker:/app
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - botnet
  redis:
    image: redis:alpine
    container_name: redis
    hostname: redis
    ports:
      - "6379:6379"
    restart: always
    networks:
      - botnet
  pgdb:
    image: postgres:12
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - env/db.env
    ports:
      - "5555:5432"
    networks:
      - botnet
  test_pgdb:
    image: postgres:12
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgrespostgres
      - POSTGRES_PORT=5432
      - POSTGRES_HOST=test_pgdb
      - POSTGRES_DB=streamaggrtest
    networks:
      - botnet
  celery-worker:
    build: src
    image: artsiomst/celery-worker
    command: celery -A application.celery_conf.celery worker -l info
    volumes:
      - ./src:/app
    env_file:
      - env/db.env
      - env/backends.env
      - env/twitch.env
      - env/broker.env
    depends_on:
      - redis
    networks:
      - botnet
  celery-beat:
    build: src
    image: artsiomst/celery-beat
    command: celery -A application.celery_conf.celery beat -l info
    volumes:
      - ./src:/app
    env_file:
      - env/db.env
      - env/backends.env
      - env/twitch.env
      - env/broker.env
    depends_on:
      - redis
      - celery-worker
    networks:
      - botnet
  celery-flower:
    build: src
    image: artsiomst/celery-flower
    command: celery -A application.celery_conf.celery flower --port=5556
    volumes:
      - ./src:/app
    env_file:
      - env/db.env
      - env/backends.env
      - env/twitch.env
      - env/broker.env
    depends_on:
      - redis
    networks:
      - botnet
    ports:
      - "5556:5556"

networks:
  botnet:

volumes:
  postgres_data:

